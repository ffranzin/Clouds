//#include "NoiseUtils.cginc"



#pragma kernel BaseShape
#pragma kernel ShapeDetail
RWTexture3D<float4> _RenderTextureBase;
RWTexture3D<float4> _RenderTextureDetail;
float4 _RenderTextureBaseDim;
float4 _RenderTextureDetailDim;

int nt;


float map(float x, float in_min, float in_max, float out_min, float out_max)
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float WorleyHash(float2 p)  
{ 
	return frac(cos(p * 89.42) * 343.42);				
}

float PerlinHash(float2 p3)
{
	p3  = 50.0*frac( p3*0.3183099 + float2(0.71,0.113));
    return -1.0+2.0*frac( p3.x*p3.y*(p3.x+p3.y) );
}

float Perlin( in float2 p )
{
    float2 i = floor( p );
    float2 f = frac( p );
	
	float2 u = f*f*(3.0-2.0*f);

    return lerp( lerp( PerlinHash( i + float2(0.0,0.0) ), 
                     PerlinHash( i + float2(1.0,0.0) ), u.x),
                lerp( PerlinHash( i + float2(0.0,1.0) ), 
                     PerlinHash( i + float2(1.0,1.0) ), u.x), u.y);
}


float PerlinFBM(float2 p)
{
	p /= 15;
	float f = 0;
	float2x2 m = float2x2( 2.6,  1.2, -1.2,  2.6 );
	f += 0.5000 * Perlin( p ); p = mul(p, m);
	f += 0.2500 * Perlin( p ); p = mul(p, m);
	f += 0.1250 * Perlin( p ); p = mul(p, m);
	f += 0.0625 * Perlin( p ); p = mul(p, m);
	f += 0.0312 * Perlin( p ); p = mul(p, m);

	return 0.5 + 0.5*f;
}


float2 WorleyNoise(float2 n)
{
 	return float2(WorleyHash(n.x * 23.62 - 300.0 + n.y * 34.35),
			WorleyHash(n.x * 45.13 + 256.0 + n.y * 38.89)); 
}


float Worley(float2 n,float s)
{
	float dis = 2.0;
	for(int x = -1; x <= 1; x++)
	{
		for(int y = -1; y <= 1; y++)
		{
			float2 p = floor(n/s) + float2(x,y);
			float d = length(WorleyNoise(p) + float2(x,y) - frac(n/s));
			if (dis > d)
				dis = d;   
		}
	}
	//return  dis; ///Original Worley noise
	return  1.0 - dis; ///Inverted Worley noise
}			



float ProcessWorley(uint3 id, int tiles, float freq)
{
	float2 uv = id.xy /= freq;
	float worley1 = Worley(uv, tiles);
	float worley2 = Worley(uv, tiles*0.5);
	float worley3 = Worley(uv, tiles*0.25);

	float blendFactor1 = 0.3f;
	float blendFactor2 = 0.3f;

	float blend1 = worley1 * (1.0f - blendFactor1) + worley1 * worley2 * 1.25f * blendFactor1;
	float blend2 = blend1 * (1.0f - blendFactor2) + blend1 * worley3 * 1.25f * blendFactor2;

	blend2 = map(blend2, 0, 1, 0.2f, 0.8f);

	return blend2;
}




[numthreads(8,8,4)]
void BaseShape (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _RenderTextureBaseDim.x || id.y >= _RenderTextureBaseDim.y || id.z >= _RenderTextureBaseDim.z)
		return;
    
	if(id.z == 0)
		_RenderTextureBase[id] = lerp( PerlinFBM(id.xy), ProcessWorley(id, 4, 1), 0.3f);

	else if(id.z == 1)
		_RenderTextureBase[id] = ProcessWorley(id, 18, 1);
	
	else if (id.z == 2)
		_RenderTextureBase[id] = ProcessWorley(id, 8, 1);

	else if (id.z == 3)
		_RenderTextureBase[id] = ProcessWorley(id, 4, 1);

	else
		_RenderTextureBase[id] = float4(1,1,1,1);
}



[numthreads(8,8,3)]
void ShapeDetail (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _RenderTextureDetailDim.x || id.y >= _RenderTextureDetailDim.y || id.z >= _RenderTextureDetailDim.z)
		return;
   

	if(id.z == 0)
		_RenderTextureDetail[id] = ProcessWorley(id, 10, 1.3);
	
	else if (id.z == 1)
		_RenderTextureDetail[id] = ProcessWorley(id, 5, 1.2);

	else if (id.z == 2)
		_RenderTextureDetail[id] = ProcessWorley(id, 4, 1.4);

	else
		_RenderTextureDetail[id] = float4(1,1,1,1);
	
}